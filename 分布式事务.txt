分布式事务
1. 本地事务是指在同一个数据库中的事务, 跨数据库事务需求则称为分布式事务. 单机事务或跨库事务.
2. 事务中的一组操作要么全都正确执行, 要么都不执行. 期望全部正确执行的操作任一一步发生错误,都需要回滚之前已完成的操作.
3. ACID, 本地事务保证数据库可靠性
  3.1 原子性: 事务是一个不可分割的执行单元, 要么全都正确执行, 要么不执行.
  3.2 一致性: 事务开始前和结束后, 数据库完整性没被破坏.
  3.3 隔离性: 事务执行过程相互独立. 严格意义的隔离就是串行执行, 和性能的矛盾导致隔离级别出现:
    (1) read uncommitted 读未提交
      一个事务对一行数据修改过程中, 不允许另一个事务对该数据进行修改, 但允许另一个事务对该行数据读.(不会出现更新丢失, 但会出现脏读, 不可重复读)
    (2) read committed 读提交(一版数据库采取的情况)
      未提交的写事务不允许其他事务访问该行(不会脏读), 但是读取数据的事务允许其他事务访问(会出现不可重复读).
    (3) Repeatable read 重复读
      读事务禁止写事务, 允许读事务, 因此不会出现同一事务两次读到不同的数据(不可重复读), 写事务禁止其他一切事务.
    (4) Serializable 序列化
      要求事务都串行执行, 避免一切因并发引起的问题
    情况说明:
      更新丢失: 并发执行事务, 更新一行, 一个事务会将另一个事务的更新覆盖掉. 不加任何锁的情况下发生.
      脏读: 一个事务读到另一个尚未提交的事务的数据(该数据可能会被回滚而失效), 第一个事务拿失效数据去处理.
      不可重复读-虚读: 同一事务中读两次获得不同结果, 事务1两次读取统一记录过程中, 事务2对该记录修改, 事务1两次读到不一样.
      不可重复读-幻读: 事务1两次查询过程中, 事务2对该表进行了插入, 删除, 导致事务1查询结果变化.
  3.4 持久性: 事务完成后, 事务执行的结果必须是持久化保存的.

分布式基本理论:
  CAP原理: 分布式系统最多满足C(一致性) A(可用性) P(分区容错性)中的两个. 由于AP的重要性, 一般牺牲C(牺牲强一致换弱一致)来满足AP.
  BASE原理: 
    BA: Basic Available 基本可用: 性能下降, 降级可用
    S: Soft State 柔性状态: 同一数据的不同副本, 可以不是实时一致的
    E: Eventual Consisstency 最终一致性: 同一数据的不同副本, 可以不是实时一致的, 经过一定时间后, 必须一致

分布式事务协议:
  两段式提交:
    投票阶段: 
    提交执行阶段: 
  三段式提交(3PC):
    CanCommit
    PreCommit
    doCommit

分布式事务的解决方案:
  TCC（两阶段型、补偿型）




